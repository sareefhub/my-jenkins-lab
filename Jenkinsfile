pipeline {
    agent any

    parameters {
        booleanParam(name: 'RUN_DEPLOY', defaultValue: true, description: 'Should we deploy?')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Select deployment environment')
    }

    stages {
        stage('Build') {
            steps {
                echo 'üî® Building application...'
                sh 'ls -l'   // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô workspace
            }
        }

        stage('Test in Parallel') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        echo 'üß™ Running unit tests...'
                        sh 'echo "Unit tests passed!" > unit_results.txt'
                    }
                }
                stage('Integration Tests') {
                    steps {
                        echo 'üîó Running integration tests...'
                        sh 'echo "Integration tests passed!" > integration_results.txt'
                    }
                }
            }
        }

        stage('Archive Test Results') {
            steps {
                sh 'echo "All tests completed!" > results.txt'
                archiveArtifacts artifacts: '*.txt', fingerprint: true
            }
        }

        stage('Approval') {
            options {
                timeout(time: 2, unit: 'MINUTES')  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà approve ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏à‡∏∞ fail
            }
            steps {
                input "Do you want to proceed with deployment?"
            }
        }

        stage('Deploy') {
            when {
                expression { return params.RUN_DEPLOY }
            }
            steps {
                echo "üöÄ Deploying application to ${params.ENV} environment..."
                sh 'echo "Deployment completed!"'
            }
        }

        stage('Cross Platform Tests (Simulated)') {
            parallel {
                stage('Linux') {
                    steps { echo 'üêß Running tests on Linux...' }
                }
                stage('Windows') {
                    steps { echo 'ü™ü Running tests on Windows...' }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline finished successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs!'
        }
        always {
            echo 'üìå Pipeline completed (success or failure).'
        }
    }
}
